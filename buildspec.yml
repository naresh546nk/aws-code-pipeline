version: 0.2
env:
  variables:
    ECR_REPO_NAME: aws-code-pipeline
phases:
  pre_build:
    commands:
      #Docker Hub login
      - echo ${DOCKERHUB_TOKEN} | docker login -u ${DOCKERHUM_USER} --password-stdin
      # ECR login
#      - REPOSITORY_URI=796731763832.dkr.ecr.ap-south-1.amazonaws.com
#      - aws ecr get-login-password --region ${AWS_REGION} | docker login -u AWS --password-stdin ${REPOSITORY_URI}
#      - ECR_IMAGE_URI="${REPOSITORY_URI}/${ECR_REPO_NAME}:latest"


  build:
    commands:
      - echo "running mvn install"
      - mvn clean install
      - docker build -t aws-code-pipeline:latest .
  post_build:
    commands:
      - DOCKER_IMAGE_URI="naresh546/aws-code-pipeline:${CODEBUILD_RESOLVED_SOURCE_VERSION:0:8}"
      - echo ${DOCKER_IMAGE_URI}
      - docker tag aws-code-pipeline:latest naresh546/aws-code-pipeline:${CODEBUILD_RESOLVED_SOURCE_VERSION:0:8}
      - docker push naresh546/aws-code-pipeline:${CODEBUILD_RESOLVED_SOURCE_VERSION:0:8}
#      - docker tag aws-code-pipeline:latest ${ECR_IMAGE_URI}
#      - docker push ${ECR_IMAGE_URI}
      #Generatie image definitions file for ECS
      - printf '[{"name":"docker-container", "imageUri":"%s"}]' ${DOCKER_IMAGE_URI} > imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
#    - target/aws-code-pipeline.jar
#  discard-paths: yes